---
title: "Linux Shell Scripting (Day 05): Advanced Linux Shell Scripting for DevOps Engineers with User Management üöÄ"
datePublished: Fri Apr 04 2025 05:11:51 GMT+0000 (Coordinated Universal Time)
cuid: cm92bv464000w09l7e8zk21m7
slug: linux-shell-scripting-day-05-advanced-linux-shell-scripting-for-devops-engineers-with-user-management
tags: cloud-computing, devops, shell-script, tws, twsbashblazechallenge-trainwithshubham, twscommunity

---

Welcome to Day 05 of **Linux Shell Scripting for DevOps Engineers**!  
This section covers **advanced scripting** concepts with real-world examples that are essential in the **DevOps** world. Scripts are written in a simple and easy-to-understand way.

## What You'll Learn Today :-

* How to use loops (`for`, `while`).
    
* Writing `.sh` (shell) scripts properly.
    
* Using `if/else` conditions.
    
* Creating users with shell scripts.
    

### **üîÅ** `for` **Loop in Shell :-**

Used when you know how many times you want to run a command.

```bash
for i in 1 2 3 4 5
do
  echo "Welcome $i times"
done
```

‚û°Ô∏è Output:

```bash
Welcome 1 times
Welcome 2 times
...
...
Welcome 5 times
```

### **üîÑ** `while` **Loop :-**

Used when the number of iterations is unknown, runs while a condition is true.

```bash
count=1
while [ $count -le 5 ]
do
  echo "Count is $count"
  ((count++))
done
```

### **‚úÖ** `if/else` **Statement :-**

Used to make decisions in scripts.

```bash
num=10
if [ $num -gt 5 ]; then
  echo "Number is greater than 5"
else
  echo "Number is 5 or less"
fi
```

### **üìÇ Writing a** `.sh` **File :-**

1. Create a script file:
    
    ```bash
    vim hello.sh
    ```
    
2. Add the shebang line at the top:
    
    ```bash
    #!/bin/bash
    echo "Hello from script!"
    ```
    
3. Make it executable:
    
    ```bash
    chmod +x hello .sh
    ```
    

4. Run the Script :
    
    ```bash
    ./hello.sh
    ```
    

### üë§ Create a New User with Shell Script

A basic user-creation script (needs root access):

```bash
#!/bin/bash

read -p "Enter username to create: " username
sudo useradd $username

if [ $? -eq 0 ]; then
  echo "User $username created successfully ‚úÖ"
else
  echo "Failed to create user ‚ùå"
fi
```
